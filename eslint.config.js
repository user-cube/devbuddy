const js = require('@eslint/js');
const reactPlugin = require('eslint-plugin-react');
const reactHooksPlugin = require('eslint-plugin-react-hooks');
const jsxA11yPlugin = require('eslint-plugin-jsx-a11y');

module.exports = [
  js.configs.recommended,
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2022,
      sourceType: 'module',
      globals: {
        window: 'readonly',
        document: 'readonly',
        console: 'readonly',
        process: 'readonly',
        Buffer: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',
        module: 'readonly',
        require: 'readonly',
        exports: 'readonly',
        global: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        alert: 'readonly',
        confirm: 'readonly',
        prompt: 'readonly',
        localStorage: 'readonly',
        sessionStorage: 'readonly',
        CustomEvent: 'readonly',
        Event: 'readonly',
        URLSearchParams: 'readonly',
        URL: 'readonly',
        fetch: 'readonly',
        XMLHttpRequest: 'readonly',
        FormData: 'readonly',
        Headers: 'readonly',
        Request: 'readonly',
        Response: 'readonly',
        Blob: 'readonly',
        File: 'readonly',
        FileReader: 'readonly',
        FileList: 'readonly',
        ArrayBuffer: 'readonly',
        Uint8Array: 'readonly',
        Int8Array: 'readonly',
        Uint16Array: 'readonly',
        Int16Array: 'readonly',
        Uint32Array: 'readonly',
        Int32Array: 'readonly',
        Float32Array: 'readonly',
        Float64Array: 'readonly',
        DataView: 'readonly',
        Map: 'readonly',
        Set: 'readonly',
        WeakMap: 'readonly',
        WeakSet: 'readonly',
        Promise: 'readonly',
        Symbol: 'readonly',
        Proxy: 'readonly',
        Reflect: 'readonly',
        JSON: 'readonly',
        Math: 'readonly',
        Date: 'readonly',
        RegExp: 'readonly',
        Error: 'readonly',
        TypeError: 'readonly',
        ReferenceError: 'readonly',
        SyntaxError: 'readonly',
        RangeError: 'readonly',
        EvalError: 'readonly',
        URIError: 'readonly',
        parseInt: 'readonly',
        parseFloat: 'readonly',
        isNaN: 'readonly',
        isFinite: 'readonly',
        decodeURI: 'readonly',
        decodeURIComponent: 'readonly',
        encodeURI: 'readonly',
        encodeURIComponent: 'readonly',
        escape: 'readonly',
        unescape: 'readonly',
        eval: 'readonly',
        Function: 'readonly',
        Object: 'readonly',
        Array: 'readonly',
        String: 'readonly',
        Number: 'readonly',
        Boolean: 'readonly',
        Infinity: 'readonly',
        NaN: 'readonly',
        undefined: 'readonly',
        null: 'readonly',
        true: 'readonly',
        false: 'readonly',
        this: 'readonly',
        arguments: 'readonly',
        super: 'readonly',
        new: 'readonly',
        delete: 'readonly',
        typeof: 'readonly',
        void: 'readonly',
        in: 'readonly',
        instanceof: 'readonly',
        yield: 'readonly',
        await: 'readonly',
        async: 'readonly',
        function: 'readonly',
        class: 'readonly',
        extends: 'readonly',
        const: 'readonly',
        let: 'readonly',
        var: 'readonly',
        return: 'readonly',
        break: 'readonly',
        continue: 'readonly',
        do: 'readonly',
        while: 'readonly',
        for: 'readonly',
        switch: 'readonly',
        case: 'readonly',
        default: 'readonly',
        if: 'readonly',
        else: 'readonly',
        throw: 'readonly',
        try: 'readonly',
        catch: 'readonly',
        finally: 'readonly',
        with: 'readonly',
        import: 'readonly',
        export: 'readonly',
        from: 'readonly',
        as: 'readonly',
        of: 'readonly',
        get: 'readonly',
        set: 'readonly',
        static: 'readonly',
        public: 'readonly',
        private: 'readonly',
        protected: 'readonly',
        interface: 'readonly',
        implements: 'readonly',
        package: 'readonly',
        enum: 'readonly',
        abstract: 'readonly',
        final: 'readonly',
        native: 'readonly',
        synchronized: 'readonly',
        volatile: 'readonly',
        transient: 'readonly',
        throws: 'readonly',
        goto: 'readonly',
        strict: 'readonly',
        use: 'readonly',
        debugger: 'readonly'
      },
      parserOptions: {
        ecmaFeatures: {
          jsx: true
        }
      }
    },
    plugins: {
      react: reactPlugin,
      'react-hooks': reactHooksPlugin,
      'jsx-a11y': jsxA11yPlugin
    },
    rules: {
      // React rules
      'react/jsx-uses-react': 'error',
      'react/jsx-uses-vars': 'error',
      'react/jsx-no-undef': 'error',
      'react/jsx-no-duplicate-props': 'error',
      'react/jsx-key': 'error',
      'react/jsx-no-target-blank': 'error',
      'react/no-unescaped-entities': 'error',
      'react/no-unknown-property': 'error',
      
      // React Hooks rules
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'warn',
      
      // Accessibility rules
      'jsx-a11y/alt-text': 'error',
      'jsx-a11y/anchor-has-content': 'error',
      'jsx-a11y/anchor-is-valid': 'error',
      'jsx-a11y/aria-props': 'error',
      'jsx-a11y/aria-proptypes': 'error',
      'jsx-a11y/aria-unsupported-elements': 'error',
      'jsx-a11y/role-has-required-aria-props': 'error',
      'jsx-a11y/role-supports-aria-props': 'error',
      
      // General JavaScript rules
      'no-unused-vars': ['error', { argsIgnorePattern: '^_' }],
      'no-console': 'warn',
      'no-debugger': 'error',
      'no-alert': 'warn',
      'no-var': 'error',
      'prefer-const': 'error',
      'no-undef': 'error',
      'no-redeclare': 'error',
      'no-unreachable': 'error',
      'no-constant-condition': 'error',
      'no-dupe-keys': 'error',
      'no-dupe-args': 'error',
      'no-dupe-class-members': 'error',
      'no-dupe-else-if': 'error',
      'no-duplicate-imports': 'error',
      'no-empty': 'warn',
      'no-extra-semi': 'error',
      'no-irregular-whitespace': 'error',
      'no-multiple-empty-lines': ['error', { max: 2 }],
      'no-trailing-spaces': 'error',
      'no-unexpected-multiline': 'error',
      'semi': ['error', 'always'],
      'quotes': ['error', 'single', { avoidEscape: true }],
      'comma-dangle': ['error', 'never'],
      'indent': ['error', 2],
      'object-curly-spacing': ['error', 'always'],
      'array-bracket-spacing': ['error', 'never'],
      'space-before-function-paren': ['error', 'always'],
      'space-before-blocks': 'error',
      'keyword-spacing': 'error',
      'space-infix-ops': 'error',
      'eol-last': 'error',
      'no-multiple-empty-lines': ['error', { max: 1 }]
    },
    settings: {
      react: {
        version: 'detect'
      }
    }
  },
  {
    files: ['src/main.js', 'src/services/**/*.js'],
    languageOptions: {
      globals: {
        // Electron globals
        ipcMain: 'readonly',
        ipcRenderer: 'readonly',
        shell: 'readonly',
        dialog: 'readonly',
        app: 'readonly',
        BrowserWindow: 'readonly',
        Menu: 'readonly',
        Tray: 'readonly',
        Notification: 'readonly',
        clipboard: 'readonly',
        nativeImage: 'readonly',
        screen: 'readonly',
        desktopCapturer: 'readonly',
        webContents: 'readonly',
        session: 'readonly',
        protocol: 'readonly',
        powerMonitor: 'readonly',
        powerSaveBlocker: 'readonly',
        globalShortcut: 'readonly',
        inAppPurchase: 'readonly',
        net: 'readonly',
        netLog: 'readonly',
        contentTracing: 'readonly',
        crashReporter: 'readonly',
        autoUpdater: 'readonly'
      }
    },
    rules: {
      'no-console': 'off', // Allow console in main process
      'no-unused-vars': ['error', { argsIgnorePattern: '^_' }]
    }
  },
  {
    files: ['src/renderer/**/*.{js,jsx}'],
    languageOptions: {
      globals: {
        // React globals
        React: 'readonly',
        useState: 'readonly',
        useEffect: 'readonly',
        useContext: 'readonly',
        useReducer: 'readonly',
        useCallback: 'readonly',
        useMemo: 'readonly',
        useRef: 'readonly',
        useImperativeHandle: 'readonly',
        useLayoutEffect: 'readonly',
        useDebugValue: 'readonly',
        useId: 'readonly',
        useTransition: 'readonly',
        useDeferredValue: 'readonly',
        useSyncExternalStore: 'readonly',
        useInsertionEffect: 'readonly',
        // React Router globals
        useNavigate: 'readonly',
        useLocation: 'readonly',
        useParams: 'readonly',
        useSearchParams: 'readonly',
        useOutlet: 'readonly',
        useOutletContext: 'readonly',
        useRoutes: 'readonly',
        useHref: 'readonly',
        useResolvedPath: 'readonly',
        useMatch: 'readonly',
        useBeforeUnload: 'readonly',
        useBlocker: 'readonly',
        useRevalidator: 'readonly',
        useFetcher: 'readonly',
        useFetchers: 'readonly',
        useLoaderData: 'readonly',
        useActionData: 'readonly',
        useNavigation: 'readonly',
        useRouteError: 'readonly',
        useRouteLoaderData: 'readonly',
        useSubmit: 'readonly',
        useFormAction: 'readonly',
        useOptimistic: 'readonly',
        useRevalidate: 'readonly',
        useShouldRevalidate: 'readonly',
        useScrollRestoration: 'readonly',
        usePrompt: 'readonly',
        useBlocker: 'readonly',
        useBeforeUnload: 'readonly',
        useFetcher: 'readonly',
        useFetchers: 'readonly',
        useLoaderData: 'readonly',
        useActionData: 'readonly',
        useNavigation: 'readonly',
        useRouteError: 'readonly',
        useRouteLoaderData: 'readonly',
        useSubmit: 'readonly',
        useFormAction: 'readonly',
        useOptimistic: 'readonly',
        useRevalidate: 'readonly',
        useShouldRevalidate: 'readonly',
        useScrollRestoration: 'readonly',
        usePrompt: 'readonly'
      }
    },
    rules: {
      'no-console': 'warn', // Allow console in renderer but warn
      'no-alert': 'warn', // Allow alert in renderer but warn
      'no-unused-vars': ['error', { argsIgnorePattern: '^_' }]
    }
  },
  {
    ignores: [
      'node_modules/**',
      'dist/**',
      'dist-renderer/**',
      'build/**',
      '*.min.js',
      'coverage/**',
      '.git/**',
      'scripts/**',
      '*.config.js',
      'vite.config.js',
      'tailwind.config.js',
      'postcss.config.cjs'
    ]
  }
];
